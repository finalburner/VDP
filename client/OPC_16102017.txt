"use strict";//----------------------OPC-------------------------
/////////////// =========================== ////////////////////

/////////////// =========================== ////////////////////
const P =       require(process.cwd() + '/OPC_param.js')
const PROD = P.SRV_MOBILITE.PROD ; /* <================= */
const winston = require('winston');
const async =   require("async");
const sql =     require('mssql');
const sleep =   require('system-sleep');
const opcua =   require("node-opcua");
var io =        require('socket.io-client');
var SRV_STATUS = { SQL : {} , OPC : {}}
// var crypto_utils = require("lib/misc/crypto_utils");

var client = new opcua.OPCUAClient(P.OPC_OPTIONS);
var the_session, the_subscription;
var ids ;
var i = 0 ;
var Write_Perm = true ; //activer le controle-commande
var BATCH_MONITORING = 0 ;
var WAIT = 100;
var SELECT = 0;
var Mnemo ;
var list_AL;
if (PROD)
var socket = io.connect(P.SRV_MOBILITE.SOCKET, {reconnect: true, "connect timeout" : 2000});
else
var socket = io.connect('https://localhost:3000', {reconnect: true, "connect timeout" : 2000});
var NodeId = "ns=2;s=" ;

var logger = new (winston.Logger)({
  transports: [
    new (winston.transports.Console)({ level: 'debug', handleExceptions: true }), // level 7 = max ==> all messages logged --> console
    new (winston.transports.File)({ filename: 'logfile.log', level: 'debug' }) // level 7 = max ==> all messages logged --> file
  ],
  exitOnError: false
});

if (io.connected === false && io.connecting === false)
{io.connect(P.SRV_MOBILITE.SOCKET);
logger.info('Connected to client on ' + P.SRV_MOBILITE.SOCKET );}


function SEND_CT_OPC(data, CT_PT_List)
{

  var tmp ;
  var len ;
  var OPC_Read = [] ;
  // console.log(CT_PT_List)
  len = CT_PT_List.length ;
  var LAT,LONG,AL_10,AL_3,AL_2,AL_1
  for (var i = 0; i < len; i++) {
  tmp = NodeId + '/Application/STEGC/Paris/PT/PT' + CT_PT_List[i].I;
  LAT = tmp + '/_Entite/Latitude' ;  //latitude
  LONG = tmp + '/_Entite/Longitude' ;  //Longitude
  AL_10 = tmp + '/_Entite/SyntheseDefCom/ExistPresent' //Présence Alarme DefCom
  AL_3 = tmp + '/_Entite/SyntheseCritique/ExistPresent' //Présence Alarme Critique
  AL_2 = tmp + '/_Entite/SyntheseMajeure/ExistPresent' //Présence Alarme Majeure
  AL_1 = tmp + '/_Entite/SyntheseMineure/ExistPresent' //Présence Alarme Mineure
  // console.log(LAT)
  // var OPC_Read = {AD,CP,VI,LAT,LONG,AL_10,AL_3,AL_2,AL_1 }
  OPC_Read.push(LAT,LONG,AL_1,AL_2,AL_3,AL_10)
   }
  //  console.log(OPC_Read)
   var opc_len = OPC_Read.length
   if (the_session)
       {

 the_session.readVariableValue(OPC_Read,function(err,dataValue,diagnostics) {
  if (err)
  {
   logger.error("OPC error" ) //local logging
   console.dir(err)
   OPC_Report(err, 'OPC_E') // Reporting
   }
  else {
    // console.dir(dataValue)
  for(i=0 ; i< opc_len ; i = i + 6)
  {
  var j= i/6 ;
  // CT_PT_List[j].A = CT_PT_List[j].AD + CT_PT_List[j].CP + CT_PT_List[j].VI //Adresse Complète
  if (dataValue[i] && dataValue[i].value) CT_PT_List[j].LA = dataValue[i].value.value;
  if (dataValue[i+1] && dataValue[i+1].value) CT_PT_List[j].LO = dataValue[i+1].value.value;
  CT_PT_List[j].AL = P.ALARM.AL_0_Color;
  if (dataValue[i+2] && dataValue[i+2].value && dataValue[i+2].value.value) CT_PT_List[j].AL = P.ALARM.AL_1_Color;
  if (dataValue[i+3] && dataValue[i+3].value && dataValue[i+3].value.value) CT_PT_List[j].AL = P.ALARM.AL_2_Color;
  if (dataValue[i+4] && dataValue[i+4].value && dataValue[i+4].value.value) CT_PT_List[j].AL = P.ALARM.AL_3_Color;
  if (dataValue[i+5] && dataValue[i+5].value && dataValue[i+5].value.value) CT_PT_List[j].AL = P.ALARM.AL_10_Color;
  // //map radius
  if (CT_PT_List[j].AL == P.ALARM.AL_0_Color) CT_PT_List[j].rad = "30"
  else  CT_PT_List[j].rad = "70"
  }
  // console.log(CT_PT_List)
CT_PT_List.push({OPC_Socket_ID : data.OPC_Socket_ID, Socket_ID: data.Socket_ID })
socket.compress(true).emit('CT_Answer', CT_PT_List )
logger.info('CT_Answer to ' + data.Socket_ID )
}
}) // OPCEND
}
   else { socket.emit('Notif_All', { Msg : 'OPC Session Error'}); logger.error("OPC session error") ; }// Reporting }
}

// winston.handleExceptions(new winston.transports.File({ filename: 'path/to/exceptions.log' }))
// winston.remove(winston.transports.Console);
// { emerg: 0, alert: 1, crit: 2, error: 3, warning: 4, notice: 5, info: 6, debug: 7 }

// logger.debug("Will not be logged in either transport!");
// logger.transports.console.level = 'debug';
// logger.transports.file.level = 'verbose';
// logger.verbose("Will be logged in both transports!");

//subscription to general OPC parameters ( Alarms Nbr , ....)
var sub_param = [
{ id : 'Synthese.PresentCount', adr : '/Application/STEGC/Paris/_Entite/Synthese.PresentCount'
},
{ id : 'SyntheseMajeure.PresentCount', adr : '/Application/STEGC/Paris/_Entite/SyntheseMajeure.PresentCount'
},
{ id : 'SyntheseMineure.PresentCount', adr : '/Application/STEGC/Paris/_Entite/SyntheseMineure.PresentCount'
},
{ id : 'SyntheseDefCom.PresentCount', adr : '/Application/STEGC/Paris/_Entite/SyntheseDefCom.PresentCount'
},
{ id : 'SyntheseCritique.PresentCount', adr : '/Application/STEGC/Paris/_Entite/SyntheseCritique.PresentCount'
}
];

function OPC_Report(event, type, info)
{
socket.emit('OPC_Report',{ event : event , type : type , info : info});
}

// Fonction de lecture d'une variable(s) OPC
// function OPC_Read(ToRead,socket){ //ToRead = [{ nodeId , Mnemo , Libelle , Active , Ack }]
// ToRead.forEach(function(id){
// alm_active = id.nodeId + '.valeur';
// alm_ack = id.nodeId + '/Alm/Acknowledged';
// // console.log(alm_state);
// the_session.readVariableValue([alm_active, alm_ack], function(err,dataValue) {
//          if (!err) {
// id.Active = dataValue[0].value.value ;
// id.Ack = dataValue[1].value.value ;
// socket.emit('AL_Answer', id);
// // id.Value = dataValue.value.value;
// // console.log(id.Mnemo + 'est active');
// console.log(id)
//   }
// });
//      });
//     //  console.log(ToReturn)
//
// // return ToRead ;
// }

socket.on('connect', function () {
logger.info("Socket connected <<>> Id :" + socket.id);
socket.emit('OPC_Socket_Connected');
});

socket.on('SRV_Query', function (data) {
var ToSend = [ SRV_STATUS ]
ToSend.Socket_ID = data.Socket_ID
ToSend.push({OPC_Socket_ID : data.OPC_Socket_ID, Socket_ID: data.Socket_ID })
logger.info('SRV_query from ' + data.Socket_ID)
console.log(ToSend)
socket.emit('SRV_Answer', ToSend);
});

//Socket query for list CT on SQL
socket.on('CT_Query', function(data){
      console.log(data)
      logger.info('CT_query from ' + data.Socket_ID)
      var CT_PT_List = []
      var request1 = new sql.Request()
      request1.input('LOGIN', sql.NVarChar, data.name)
      request1.execute('BDD_DONNEES.dbo.MOBILE_GET_UTILISATEUR_CT', (err, rec) => {
      if (err) {
      logger.error(err) ; OPC_Report(err, 'SQLO_E') // Reporting
      }
      else
      {
      CT_PT_List = JSON.parse(JSON.stringify(rec.recordset).replace(/"\s+|\s+"/g,'"'))
      if (CT_PT_List.length > 0 ) SEND_CT_OPC(data,CT_PT_List)
      else logger.info('CT_Query ERROR : AUCUN CT retrouvé ' + data.Socket_ID )
    }
   })

  // if (sql != 'Read') socket.emit('Error', { Component: 'SQL', Property : 'Session', Value : 'Off'})
 });


 //Socket query for list CT + DGF on SQL
 socket.on('PH_Query', function(data){
 logger.info('PH_Query from ' + data.Socket_ID)
    if (data.Mode == 'CT')
    {
    // Requete SQL CT + PT
    var query = 'Select distinct ' + P.SQL.Localisation + ' as L , ' + P.SQL.NomGroupeFonctionnel + ' as NGF, ' + P.SQL.DesignGroupeFonctionnel + ' as DGF ,' + P.SQL.Libelle_groupe + ' as LG, ID from dbo.V_SUPERVISION where ' + P.SQL.NomGroupeFonctionnel + '=\'CIRCU \' order by ' + P.SQL.Localisation
    console.log(query)
     var request = new sql.Request().query(query).then(function(rec) {
     var CT_List = JSON.parse(JSON.stringify(rec.recordset).replace(/"\s+|\s+"/g,'"'))
     console.dir(CT_List)

      CT_List.push({OPC_Socket_ID : data.OPC_Socket_ID, Socket_ID: data.Socket_ID })
      socket.emit('PH_Answer', CT_List )
      logger.info('PH_Answer to ' + data.Socket_ID )

 }).catch(function(err) {
 logger.error(err)
 OPC_Report(err, 'SQLO_E') // Reporting
 });
}
  });

  //Socket query for list CT + DGF on SQL
socket.on('Fic_Query', function(data){

  logger.info('Fic_Query from ' + data.Socket_ID)

     if (data.Mode == 'CT')
     {
      var CT_List
     // Requete SQL CT + PT
     var query = 'Select distinct ' + P.SQL.Localisation + ' as L from dbo.SUPERVISION order by ' + P.SQL.Localisation
     // console.log(query)
      var request = new sql.Request().query(query).then(function(rec) {
      var CT_List = JSON.parse(JSON.stringify(rec.recordset).replace(/"\s+|\s+"/g,'"'))
        console.log(rec)
       CT_List.push({OPC_Socket_ID : data.OPC_Socket_ID, Socket_ID: data.Socket_ID })
       socket.emit('Fic_Answer1', CT_List )
       logger.info('Fic_Answer1 to ' + data.Socket_ID )

  }).catch(function(err) {
  logger.error(err)
  OPC_Report(err, 'SQLO_E') // Reporting
  });
  }
  //// MODE TRANCHE IMPLENTE DEPUIS L'application
   });

  //Socket query for Status list
  socket.on('Sta_Query', function(data){
    console.log(data)
    var OPC_Read = [] ; //requetes OPC
    var R =[] // Listes Status
    logger.info('Sta_Query from ' + data.Socket_ID)

  if (the_session)
   {
if (data.Mode == "Read" && data.Selected_CT)
{
   var query = "Select " + P.SQL.Installation_technique + " as IT, " + P.SQL.NomGroupeFonctionnel + " as NGF, " +  P.SQL.DesignGroupeFonctionnel + " as DGF , " + P.SQL.NomObjetFonctionnel + " as NOF, "+ P.SQL.DesignObjetFonctionnel + " as DOF, " + P.SQL.Information + " as I , " + P.SQL.Libelle_information + " as L , "
       query += P.SQL.Type + " as T , " + P.SQL.TOR_CodeEtat1 + " as T1, " + P.SQL.TOR_CodeEtat0 + " as T0 from dbo.SUPERVISION WHERE " + P.SQL.Localisation + " = \'" + data.Selected_CT + "\' ";
       query += "AND ( " + P.SQL.NomGroupeFonctionnel + " = \'GENER\' OR " + P.SQL.NomGroupeFonctionnel + " = \'PRODU\' ) ";
       query += "AND " + P.SQL.Metier + " = \'CVC\'";
       console.log(query)
      var request = new sql.Request().query(query).then(function(rec) {
      rec = JSON.parse(JSON.stringify(rec.recordset).replace(/"\s+|\s+"/g,'"'))
       var len = rec.length ;

       for (var i = 0; i < len; i++) {
         var id = rec[i]
          var Mnemo = 'CVC_PT' + id.IT + '_' + id.NGF + id.DGF + '_' + id.NOF + id.DOF + '_' + id.I ;
          var adr = '/Application/STEGC/Paris/PT/PT' + id.IT + '/Acquisition/' + Mnemo + '.Valeur';
          var NodeId = "ns=2;s=" + adr;
          OPC_Read.push(NodeId)
          R.push({ L : id.L , M : Mnemo })
        }
      console.log(OPC_Read)
      the_session.readVariableValue(OPC_Read, function(err,dataValue,diagnostics) {
            if (err)
            { logger.error("OPC error" + err );

              OPC_Report(err, 'OPC_E') // Reporting
            }
            else {
              // console.dir(dataValue)
            for(i=0 ; i< len ; i++)
            {
            if (dataValue[i] && dataValue[i].value)
                  {
                  R[i].V =  dataValue[i].value.value
                  // console.log(dataValue[i].value.value)
                  if (R[i].V)
                  R[i].E= rec[i].T1
                  else
                  R[i].E= rec[i].T0
                 }

               }
               R.push({OPC_Socket_ID : data.OPC_Socket_ID , Socket_ID: data.Socket_ID });
               socket.emit('Sta_Answer', R);
               logger.info('Sta_Answer to ' + data.Socket_ID )

              }
       })
  }).catch(function(err) {
  logger.error(err)
  OPC_Report(err, 'SQLO_E') // Reporting
  });
  }

   if ( data.Mode == "Read_Bat" )
  {
        var request = new sql.Request()
        request.input('NUM_CT', sql.NVarChar, data.Selected_CT)
        request.execute('MOBILE_GET_CT_ETAT', (err, rec) => {
        if (err) {
          logger.error(err)
          OPC_Report(err, 'SQLO_E') // Reporting
          }
        else {

       rec = JSON.parse(JSON.stringify(rec.recordset).replace(/"\s+|\s+"/g,'"'))
        var len = rec.length ;
         console.log(rec)
        for (var i = 0; i < len; i++) {
          var id = rec[i]
           var Mnemo = 'CVC_PT' + id.IT + '_' + id.NGF + id.DGF + '_' + id.NOF + id.DOF + '_' + id.I ;
           var adr = '/Application/STEGC/Paris/PT/PT' + id.IT + '/Acquisition/' + Mnemo + '.Valeur';
           var NodeId = "ns=2;s=" + adr;
           OPC_Read.push(NodeId)
           R[i] = id
         }

       console.log(OPC_Read)
       the_session.readVariableValue(OPC_Read, function(err,dataValue,diagnostics) {
             if (err)
             { logger.error("OPC error" + err );
               OPC_Report(err, 'OPC_E') // Reporting
               socket.emit('Notif_All', { Msg : 'OPC Session Error'}); logger.error("OPC session error")
             }
             else {
               console.dir(dataValue)
             for(i=0 ; i< len ; i++)
             {
             if (dataValue[i] && dataValue[i].value)
                   {

                   if (R[i].T == 'TA' || R[i].T == 'TC')
                   { if (dataValue[i].value.value)
                   R[i].E= rec[i].T1
                   else
                   R[i].E= rec[i].T0
                  }
                  if (R[i].T == 'TM' || R[i].T == 'TR')
                  {
                  R[i].E= dataValue[i].value.value.toFixed(2)
                 }

                }
              }
                console.log(R)
                R.push({OPC_Socket_ID : data.OPC_Socket_ID , Socket_ID: data.Socket_ID });
                socket.emit('Sta_Answer', R);
                logger.info('Sta_Answer to ' + data.Socket_ID )

               }
        })
   }

  })

    }
    // if (sql != 'Read') socket.emit('Error', { Component: 'SQL', Property : 'Session', Value : 'Off'})
  }
   });


socket.on('Cha_Query', function (data){
console.log(data)
logger.info('Cha_Query from ' + data.Socket_ID)
if (data.Selected_PT == 'null' || !data.Selected_PT)
logger.info('No PT Selected')
else
{
var c1,c2; //coubre adresse
var q1,q2; //queries
var x = []; // c1 values
var y = []; // c2 values
if (data.NGF == 'CHAUD' || data.NGF == 'ECHAN' || data.NGF == 'GENER' || data.NGF =='PRODU')
{
   c1 = '/STEGC/Paris/PT/PT' + data.Selected_PT + '/Acquisition/CVC_PT' + data.Selected_PT + '_' + data.NGF + data.DGF + '_TEMP3DEPAR_M01' ; //TEMP3_DEPAR
   c2 = '/STEGC/Paris/PT/PT' + data.Selected_PT + '/Acquisition/CVC_PT' + data.Selected_PT + '_' + data.NGF + data.DGF + '_CONSI00001_M01' ; //CONSI_CALC
}

if (data.NGF == 'CIRCU')
{
   c1 = '/STEGC/Paris/PT/PT' + data.Selected_PT + '/Acquisition/CVC_PT' + data.Selected_PT + '_' + data.NGF + data.DGF + '_TEMP3DEPAR_M01' ; //TEMP3_DEPAR
   c2 = '/STEGC/Paris/PT/PT' + data.Selected_PT + '/Acquisition/CVC_PT' + data.Selected_PT + '_' + data.NGF + data.DGF + '_TEMP3AMBIA_M01' ; //TEMP3_AMBIA
}

if (data.NGF == 'EAUCS')
{
   c1 = '/STEGC/Paris/PT/PT' + data.Selected_PT + '/Acquisition/CVC_PT' + data.Selected_PT + '_' + data.NGF + data.DGF + '_TEMP3DEPAR_M01' ; //TEMP3_DEPAR
   c2 = '/STEGC/Paris/PT/PT' + data.Selected_PT + '/Acquisition/CVC_PT' + data.Selected_PT + '_' + data.NGF + data.DGF + '_TEMP3BOUCL_M01' ; //TEMP3_BOUCL
}

if (data.NGF == 'CTAIR')
{
   c1 =  '/STEGC/Paris/PT/PT' + data.Selected_PT + '/Acquisition/CVC_PT' + data.Selected_PT + '_' + data.NGF + data.DGF + '_TEMP3SOUFF_M01' ; //TEMP3_SOUFF
   c2 =  '/STEGC/Paris/PT/PT' + data.Selected_PT + '/Acquisition/CVC_PT' + data.Selected_PT + '_' + data.NGF + data.DGF + '_TEMP3REPRI_M01' ; //TEMP3_REPRI
}

q1 = 'SELECT TOP 20 TriggeringValue as v FROM ARCHIVES.dbo.Mesure_PT' + data.Selected_PT  + ' where Name = \'' + c1 + '/Evt\' ORDER BY UTC_App_DateTime DESC '
q2 = 'SELECT TOP 20 TriggeringValue as v FROM ARCHIVES.dbo.Mesure_PT' + data.Selected_PT  + ' where Name = \'' + c2 + '/Evt\' ORDER BY UTC_App_DateTime DESC '
console.log(q1)
console.log(q2)
//// c1 values
var request = new sql.Request().query(q1).then(function(rec) {
var rec=JSON.parse(JSON.stringify(rec.recordset).replace(/"\s+|\s+"/g,'"'))
// console.log(rec)
if(rec.length)
{
for (var i=0; i<rec.length; i++) // to Array
x.push(parseInt(rec[i].v)) // to Array
x.push({ OPC_Socket_ID : data.OPC_Socket_ID, Socket_ID: data.Socket_ID , Selected_CT : data.Selected_CT , NGF : data.NGF , DGF : data.DGF });
socket.emit('Cha_Answer1', x);
console.log(x)

}}).catch(function(err) {
logger.error(err)
OPC_Report(err, 'SQLO_E') // Reporting
});

// c2 values
var request2 = new sql.Request().query(q2).then(function(rec2) {
var rec2=JSON.parse(JSON.stringify(rec2.recordset).replace(/"\s+|\s+"/g,'"'))

if(rec2.length)
{
for (var j=0; j<rec2.length; j++) // to Array
y.push(parseInt(rec2[j].v)) // to Array
y.push({ OPC_Socket_ID : data.OPC_Socket_ID, Socket_ID: data.Socket_ID , Selected_CT : data.Selected_CT , NGF : data.NGF , DGF : data.DGF });
socket.emit('Cha_Answer2', y);
console.log(y)
}

}).catch(function(err) {
logger.error(err)
OPC_Report(err, 'SQLO_E') // Reporting
});

}
});


socket.on('GF_Query', function (data){
logger.info('GF_query from ' + data.Socket_ID)
///////// RETURN GF.LIST et GF.INFO
if (the_session)
{
var NodeId = "ns=2;s=" ;
var OPC_Read = []  ;
var GF = { LIST : [] , INFO : {} }
var len ;
var query ;
// console.log(data)
if (data.Selected_CT == 'null' || !data.Selected_CT )
logger.info('No CT Selected')
else {

  var request = new sql.Request()
  request.input('NUM_CT', sql.NVarChar, data.Selected_CT)
  request.execute('MOBILE_GET_GF', (err, rec) => {
  if (err) {
    logger.error(err)
    OPC_Report(err, 'SQLO_E') // Reporting
    }
  else {
  var   recordset = rec.recordset;
  if (recordset) {
    console.log(recordset)
    len = recordset.length
    for (var i = 0 ; i < len; i++) {
    var id = recordset[i];
    // var GF= '/STEGC/Paris/PT/PT' + data.Selected_PT + '/GRF_PT' + data.Selected_PT + '_' + id.NGF + id.DGF;
    var COLOR = NodeId + '/Application/STEGC/Paris/PT/PT' + data.Selected_PT + '/GRF_PT' + data.Selected_PT + '_' + id.NGF + id.DGF + '/Synthese.PriorityMax' ;
    OPC_Read.push(COLOR)
    GF.LIST.push({ NGF : id.NGF, DGF : id.DGF , LG : id.LG , CT: id.CT , PT : id.PT })
    }
    var TMP_EXT = NodeId + '/Application/STEGC/Paris/PT/PT' + data.Selected_PT + '/Acquisition/CVC_PT' + data.Selected_PT + '_' + 'PRODUCTION_TEMP1EXTER_M01.Valeur' ;
    OPC_Read.push(TMP_EXT) //Nouvelle codification température extérieur CT
    TMP_EXT = NodeId + '/Application/STEGC/Paris/PT/PT' + data.Selected_PT + '/Acquisition/CVC_PT' + data.Selected_PT + '_' + 'GENER00001_TEMP1EXTER_M01.Valeur' ;
    OPC_Read.push(TMP_EXT) //Ancienne codification température extérieur CT

    console.log(OPC_Read)
    console.log(GF)
    if(OPC_Read){
    the_session.readVariableValue(OPC_Read, function(err,dataValue,diagnostics) {
              if (err)
             { logger.error("OPC error" + err) ; OPC_Report(err, 'OPC_E')}
              else {
                 console.log(dataValue)
              for(i=0 ; i< OPC_Read.length -2 ; i++)
              {
                if (dataValue[i]  && dataValue[i].value)
                { var C = dataValue[i].value.value; //COLOR
                GF.LIST[i].COLOR =  P.ALARM.AL_0_Color ; //applique la couleur alarme de base
                if (C == '1')  GF.LIST[i].COLOR = P.ALARM.AL_1_Color ; //applique la couleur alarme mineure
                if (C == '2')  GF.LIST[i].COLOR = P.ALARM.AL_2_Color ; //applique la couleur alarme majeure
                if (C == '3')  GF.LIST[i].COLOR = P.ALARM.AL_3_Color ; //applique la couleur alarme critique
                if (C == '10') GF.LIST[i].COLOR = P.ALARM.AL_10_Color ; //applique la couleur alarme def com
              //  console.log(GF[j].COLOR)
               }
             }
            var j = OPC_Read.length - 2
            if(dataValue[j] && dataValue[j].value && dataValue[j].value.value) //TMP_EXT IS PRODUCTION
            GF.INFO.TMP_EXT = dataValue[j].value.value.toFixed(1)
            if(dataValue[j+1] && dataValue[j+1].value && dataValue[j+1].value.value) //TMP_EXT IS GENER0001
            GF.INFO.TMP_EXT = dataValue[j+1].value.value.toFixed(1)

GF.LIST.push({ OPC_Socket_ID : data.OPC_Socket_ID, Socket_ID: data.Socket_ID , Selected_CT: data.Selected_CT});
socket.emit('GF_Answer', GF);
console.log(GF)
logger.info("GF Emit ")
            }});}

};}

})
}}
  else { socket.emit('Notif_All', { Msg : 'OPC Session Error'}); logger.error("OPC session error") ;  }
  // if (sql != 'Read') socket.emit('Error', { Component: 'SQL', Property : 'Session', Value : 'Off'})
});


socket.on('AL_Query', function (data){
  console.log(data)

logger.info('AL_Query from ' + data.Socket_ID)

if (the_session)
{
 if(data.Mode == "Read") {
  // logger.info('AL_Query : ' + data.Socket_ID) ;
  var query ;
  var Ack;
  var Actif ;
  var OPC_Read  = [];
  var ToSend = [];

  if (!data.Selected_CT || data.Selected_CT == 'null')
  {query  = "Select top 300" + P.SQL.Localisation  + " as LO, " +  P.SQL.Libelle_information + " AS L, " +  P.SQL.Installation_technique + " AS IT,  " + P.SQL.NomGroupeFonctionnel + " AS NGF," + P.SQL.Libelle_groupe + " AS LG,"
   query +=  P.SQL.DesignGroupeFonctionnel + " AS DGF, " +  P.SQL.NomObjetFonctionnel + " AS NOF,  " + P.SQL.DesignObjetFonctionnel + " AS DOF, " +  P.SQL.Information + " AS I,  " + P.SQL.TOR_CriticiteAlarme + " AS C "
   query += "from dbo.SUPERVISION WHERE  " + P.SQL.Type + " = 'TA' and  " +  P.SQL.Metier + " = 'CVC' "}
  else
   {query = "Select  " + P.SQL.Libelle_information + " AS L,  " + P.SQL.Installation_technique + " AS IT, " +  P.SQL.NomGroupeFonctionnel + " AS NGF," + P.SQL.Libelle_groupe + " AS LG,"
    query += P.SQL.DesignGroupeFonctionnel + " AS DGF,  " + P.SQL.NomObjetFonctionnel + " AS NOF, " +  P.SQL.DesignObjetFonctionnel + " AS DOF,  " + P.SQL.Information + " AS I, " +  P.SQL.TOR_CriticiteAlarme + " AS C "
    query += "from dbo.SUPERVISION WHERE " + P.SQL.Type + "= 'TA' and  " + P.SQL.Localisation + " =\'" + data.Selected_CT + "\' and  "
    query += P.SQL.Metier + " = 'CVC' "  }
console.log(query)
  var request = new sql.Request().query(query).then(function(rec) {
  if (rec) {
  var recordset=JSON.parse(JSON.stringify(rec.recordset).replace(/"\s+|\s+"/g,'"'))
  var len = recordset.length ;
  var opc_len ;
  // console.log(recordset)
  for (var i = 0 ; i < len; i++) {
                  var id = recordset[i];
                  var Mnemo = 'CVC_PT' + id.IT + '_' + id.NGF + id.DGF + '_' + id.NOF + id.DOF + '_' + id.I ;
                  var adr = '/Application/STEGC/Paris/PT/PT' + id.IT + '/Acquisition/' + Mnemo ;
                  var NodeId = "ns=2;s=" + adr;
                  // if (id.C && id.Libelle_information )
                  // AlmToRead.push({ NodeId : NodeId , Mnemo : Mnemo , Libelle: id.Libelle_information, Criticite : id.C , Actif : '' , Ack : ''})
                  OPC_Read.push(NodeId + '.valeur')
                  OPC_Read.push(NodeId + '/Alm/Acknowledged')
                  var AL =  P.ALARM.AL_0_Color ; //applique la couleur alarme de base
                  if (id.C == '1')  AL = P.ALARM.AL_1_Color ; //applique la couleur alarme mineure
                  if (id.C == '2')  AL = P.ALARM.AL_2_Color ; //applique la couleur alarme majeure
                  if (id.C == '3')  AL = P.ALARM.AL_3_Color ; //applique la couleur alarme critique
                  if (id.C == '10') AL = P.ALARM.AL_10_Color ; //applique la couleur alarme def com

  if (!data.Selected_CT || data.Selected_CT == 'null')  ToSend.push({ N : NodeId, M : Mnemo, AL: AL, L : id.L , C : id.C , LO : id.LO , LG : id.LG})
  else  ToSend.push({ N : NodeId, M : Mnemo, AL: AL, L : id.L , C : id.C , LG : id.LG , LO : data.Selected_CT})

     };
// console.log(OPC_Read)
the_session.readVariableValue(OPC_Read, function(err,dataValue,diagnostics) {
if (err) {

logger.error("OPC error"+ err); OPC_Report(err, 'OPC_E')
}
else {
  console.log(dataValue)
var T ;
var Ack,Act;
 for (var i = 0 ; i < len ; i++) {
//Gestion d'erreur OPC lecture attribut Actif
// console.log(opc_len)
id = recordset[i];

if(dataValue[i].sourceTimestamp)
ToSend[i].S= dataValue[i].sourceTimestamp.toLocaleString("fr-FR") //date type
console.log(ToSend[i].S)


if (dataValue[2*i].statusCode )
{
  if (dataValue[2*i].statusCode._base)
  {
     id.StatusCode_Actif = dataValue[2*i].statusCode._base['name'];
     if ( id.StatusCode_Actif = 'Good' && dataValue[2*i].value)
     Act = dataValue[2*i].value.value;
  }
  if (dataValue[2*i].statusCode['name'])
  {
      id.StatusCode_Actif = dataValue[2*i].statusCode['name'];
      if( id.StatusCode_Actif = 'Good' && dataValue[2*i].value)
      Act= dataValue[2*i].value.value;
  }
 }
//Gestion d'erreur OPC lecture attribut Ack

 if (dataValue[2*i+1].statusCode )
 {
   if (dataValue[2*i+1].statusCode._base)
   {
      id.StatusCode_Ack = dataValue[2*i+1].statusCode._base['name'];
      if ( id.StatusCode_Ack = 'Good' && dataValue[2*i+1].value)
      Ack = dataValue[2*i+1].value.value;
    }

  if (dataValue[2*i+1].statusCode['name'])
    {
       id.StatusCode_Ack = dataValue[2*i+1].statusCode['name'];
       if( id.StatusCode_Ack = 'Good' && dataValue[2*i+1].value)
      Ack = dataValue[2*i+1].value.value;
    }

}

if(Act&&Ack) ToSend[i].P = 1 ; //Présente Acquitée
if(Act&&!Ack)  ToSend[i].P = 2 ; //Présente ( non Ack )
if(!Act&&!Ack)  {
//couleur blanche pour les alarmes disparue non Ack
  ToSend[i].P = 3 ; // Disparue ( non Ack )
  ToSend[i].AL = P.ALARM.AL_D_Color ;
}
}

// console.log(ToSend)
ToSend.push({  OPC_Socket_ID : data.OPC_Socket_ID, Socket_ID: data.Socket_ID, Selected_CT : data.Selected_CT})
socket.emit('AL_Answer', ToSend);
logger.info('AL_Answer to ' + data.Socket_ID )
  }

      });
    };
      }).catch(function(err) { //Gestion globale des erreurs SQL
        logger.error(err)
        OPC_Report(err, 'SQLO_E') // Reporting

      });

}

if( data.Mode == "Write" )
{
  // console.log(data)
  if (data.Type == "ACK") {

  //
  // var browsePath = [
  //     opcua.browse_service.makeBrowsePath(data.nodeID + "/Alm" ,".AckRequest"),
  // ];
  //
  // the_session.translateBrowsePath(browsePath, function (err, results) {
  //     if (!err) {
  //       console.log(results[0].toString());
  //
  //     }
  // });
  console.log(data)
var methodsToCall = [];
   methodsToCall.push({
    objectId: opcua.resolveNodeId(data.N + '/Alm'),
    methodId: opcua.resolveNodeId(data.N + '/Alm.AckRequest'),
    inputArguments: [{ // Nom opérateur
        dataType: opcua.DataType.String,
        arrayType: opcua.VariantArrayType.Scalar,
        value:  "MobileVDP" },
        { // Nom poste exploitation
        dataType: opcua.DataType.String,
        arrayType: opcua.VariantArrayType.Scalar,
        value:  "MobileVDP" }
] //OK
    });

    // console.dir(methodsToCall)
    the_session.call(methodsToCall,function(err,results){
    if (results.length && results[0].statusCode == opcua.StatusCodes.Good)
     {
       logger.info("ACK done ")
       data.Ack = true ;
      //  console.log(data)
       socket.emit('Notif_Client', { Msg : data.L + ' acquitté(e)' , Socket_ID : data.Socket_ID});
       socket.emit('AL_Answer', data );
     }
     else
     logger.error(err)

    });


 }
}
}
  if (!the_session) { socket.emit('Notif_All', { Msg : 'OPC Session Error'}); logger.error("OPC session error") ; }
  // if (sql != 'Read') socket.emit('Error', { Component: 'SQL', Property : 'Session', Value : 'Off'})
    });

socket.on('Cons_Query', function (data){
  console.log(data)
logger.info('Cons_Query from ' + data.Socket_ID)
if (the_session)
{
  if (data.Mode == "Read")
  {
  console.log(data)
  var NodeId = "ns=2;s=" ;
  var OPC_Read = [];
  var query ;
  var ToSend = []
  if (data.Selected_CT && data.DGF && data.NGF)
  {
    if(data.NGF == 'CIRCU' && data.Vue == 2)
    {
  var OPC_link = NodeId + '/Application'
  // Courbe vue consigne du groupe fonctionnel
  var c =  OPC_link + '/STEGC/Paris/PT/PT' + data.Selected_PT + '/Acquisition/CVC_PT' + data.Selected_PT + '_' + data.NGF + data.DGF ;
  var c1 = c + '_CONSI00001_R01.Valeur' ; //T-10
  var c2 = c + '_CONSI00001_R02.Valeur' ; //T+10
  var c3 = c + '_CONSI00001_R03.Valeur' ; //T+20
  var OPC_Read_Chart = [c1,c2,c3]
  var Chart_ToSend = []
  the_session.readVariableValue(OPC_Read_Chart , function(err,dataValue,diagnostics) {
    if (err)
    {
      logger.error("OPC error" + err);
      OPC_Report(err, 'OPC_E')  }
    else {
      // console.log(dataValue)
      for(i=0;i<3; i++)
      {
      if (dataValue[i] && dataValue[i].value) {
      // console.log(dataValue[i])
      Chart_ToSend[i] = dataValue[i].value.value
      }
      else
      Chart_ToSend[i] = 999;
     }
    //  console.log(Chart_ToSend)
     Chart_ToSend.push({ OPC_Socket_ID : data.OPC_Socket_ID, Socket_ID: data.Socket_ID , Selected_CT : data.Selected_CT, DGF : data.DGF , NGF : data.NGF });
     socket.emit('Cha_Answer3', Chart_ToSend);
     logger.info('Cha_Answer3 to ' + data.Socket_ID)

      }
  });
  }

    var request = new sql.Request()
    request.input('Vue', sql.NVarChar, data.Vue)
    request.input('NUM_CT', sql.NVarChar, data.Selected_CT)
    request.input('DGF', sql.NVarChar, data.DGF)
    request.input('NGF', sql.NVarChar, data.NGF)
    request.execute('BDD_DONNEES.dbo.MOBILE_GET_CT_CONSIGNE', (err, rec) => {
    if (err) {
    logger.error(err) ; OPC_Report(err, 'SQLO_E') // Reporting
    }
    else
    {
      console.log(rec.recordset)
    var recordset=JSON.parse(JSON.stringify(rec.recordset).replace(/"\s+|\s+"/g,'"'))
    var len = recordset.length

      for (var i = 0 ; i < len; i++) {
      var id = recordset[i] ;
      var Mnemo = 'CVC_PT' + id.IT + '_' + id.NGF + id.DGF + '_' + id.NOF + id.DOF + '_' + id.I ;
      var Adr = NodeId + '/Application/STEGC/Paris/PT/PT' + id.IT + '/Acquisition/' + Mnemo + '.Valeur';
      OPC_Read.push(Adr)
      ToSend.push({ DGF : id.DGF, NGF: id.NGF , I : id.I, GRP : id.NOF+id.DOF, NOF : id.NOF ,  DOF : id.DOF, A : id.A , A1 : id.A1 , A0 : id.A0, M: Mnemo, Adr : Adr, L : id.LI , T : id.T,T0 : id.T0, T1 : id.T1, })
      }
    the_session.readVariableValue(OPC_Read, function(err,dataValue,diagnostics) {
      if (err)
      {
        logger.error("OPC error"+ err.StatusCodes);
        OPC_Report(err, 'OPC_E')  }
      else {
    // console.log(dataValue)
   for(i=0 ; i < len ; i++)
    {
  if (dataValue[i] && dataValue[i].value && dataValue[i].value.value || dataValue[i].value.value == 0 ) {
  // ToSend[i].V = parseInt(dataValue[i].value.value.toFixed(0));
  if (typeof dataValue[i].value.value == "boolean")
  ToSend[i].V =dataValue[i].value.value
  else{
    if (ToSend[i].I == 'M99')
    {
    if (ToSend[i].NGF == 'CIRCU' && dataValue[i].value.value == '0') {ToSend[i].E = "Arrêt" }
    if (ToSend[i].NGF == 'CIRCU' && dataValue[i].value.value == '1') {ToSend[i].E = "Arrêt optimisé" }
    if (ToSend[i].NGF == 'CIRCU' && dataValue[i].value.value == '2') {ToSend[i].E = "Chauffage compensé" }
    if (ToSend[i].NGF == 'CIRCU' && dataValue[i].value.value == '3') {ToSend[i].E = "Relance optimisé" }
    if (ToSend[i].NGF == 'CIRCU' && dataValue[i].value.value == '4') {ToSend[i].E = "Réduit de nuit" }
    if (ToSend[i].NGF == 'CIRCU' && dataValue[i].value.value == '6') {ToSend[i].E = "Antigel" }
    if (ToSend[i].NGF == 'CIRCU' && dataValue[i].value.value == '10') {ToSend[i].E = "Arrêt forcé" }
    if (ToSend[i].NGF == 'CIRCU' && dataValue[i].value.value == '11') {ToSend[i].E = "Arrêt défaut" }
    if (ToSend[i].NGF == 'CIRCU' && dataValue[i].value.value == '12') {ToSend[i].E = "Manuel" }
    if (ToSend[i].NGF == 'CIRCU' && dataValue[i].value.value == '13') {ToSend[i].E = "Dégommage" }
    if (ToSend[i].NGF == 'PRODU' && dataValue[i].value.value == '0') {ToSend[i].E = "Arrêt" }
    if (ToSend[i].NGF == 'PRODU' && dataValue[i].value.value == '1') {ToSend[i].E = "Étage 1" }
    if (ToSend[i].NGF == 'PRODU' && dataValue[i].value.value == '2') {ToSend[i].E = "Étage 2" }
    if (ToSend[i].NGF == 'PRODU' && dataValue[i].value.value == '3') {ToSend[i].E = "Étage 3" }
    if (ToSend[i].NGF == 'PRODU' && dataValue[i].value.value == '4') {ToSend[i].E = "Étage 4" }
    if (ToSend[i].NGF == 'PRODU' && dataValue[i].value.value == '5') {ToSend[i].E = "Étage 5" }
    if (ToSend[i].NGF == 'PRODU' && dataValue[i].value.value == '6') {ToSend[i].E = "Étage 6" }
    if (ToSend[i].NGF == 'PRODU' && dataValue[i].value.value == '9') {ToSend[i].E = "Attente" }
    if (ToSend[i].NGF == 'PRODU' && dataValue[i].value.value == '10') {ToSend[i].E = "Arrêt forcé" }
    if (ToSend[i].NGF == 'PRODU' && dataValue[i].value.value == '11') {ToSend[i].E = "Arrêt défaut" }
    if (ToSend[i].NGF == 'PRODU' && dataValue[i].value.value == '12') {ToSend[i].E = "Manuel" }
    if (ToSend[i].NGF == 'PRODU' && dataValue[i].value.value == '13') {ToSend[i].E = "Dégommage" }
    if (ToSend[i].NGF == 'EAUCS' && dataValue[i].value.value == '0') {ToSend[i].E = "ECS Satisfait" }
    if (ToSend[i].NGF == 'EAUCS' && dataValue[i].value.value == '1') {ToSend[i].E = "Production ECS hydraulique" }
    if (ToSend[i].NGF == 'EAUCS' && dataValue[i].value.value == '2') {ToSend[i].E = "Production ECS électrique" }
    if (ToSend[i].NGF == 'EAUCS' && dataValue[i].value.value == '3') {ToSend[i].E = "Production ECS arrêt" }
    if (ToSend[i].NGF == 'EAUCS' && dataValue[i].value.value == '10') {ToSend[i].E = "Défaut ECS" }
    if (ToSend[i].NGF == 'EAUCS' && dataValue[i].value.value == '13') {ToSend[i].E = "Dégommage" }
    if (ToSend[i].NGF == 'CTAIR' && dataValue[i].value.value == '0') {ToSend[i].E = "Arrêt" }
    if (ToSend[i].NGF == 'CTAIR' && dataValue[i].value.value == '1') {ToSend[i].E = "Ventilation" }
    if (ToSend[i].NGF == 'CTAIR' && dataValue[i].value.value == '2') {ToSend[i].E = "Chauffage" }
    if (ToSend[i].NGF == 'CTAIR' && dataValue[i].value.value == '3') {ToSend[i].E = "Maintien en température" }
    if (ToSend[i].NGF == 'CTAIR' && dataValue[i].value.value == '8') {ToSend[i].E = "Manuel" }
    if (ToSend[i].NGF == 'CTAIR' && dataValue[i].value.value == '6') {ToSend[i].E = "Grand froid" }
    if (ToSend[i].NGF == 'CTAIR' && dataValue[i].value.value == '7') {ToSend[i].E = "Arrêt forcé" }
    if ((ToSend[i].NGF == 'ECHAN' || ToSend[i].NGF == 'CHAUD') && dataValue[i].value.value == '0') {ToSend[i].E = "Arrêt" }
    if ((ToSend[i].NGF == 'ECHAN' || ToSend[i].NGF == 'CHAUD') && dataValue[i].value.value == '1') {ToSend[i].E = "Priorité 1" }
    if ((ToSend[i].NGF == 'ECHAN' || ToSend[i].NGF == 'CHAUD') && dataValue[i].value.value == '2') {ToSend[i].E = "Priorité 2" }
    if ((ToSend[i].NGF == 'ECHAN' || ToSend[i].NGF == 'CHAUD') && dataValue[i].value.value == '3') {ToSend[i].E = "Priorité 3" }
    if ((ToSend[i].NGF == 'ECHAN' || ToSend[i].NGF == 'CHAUD') && dataValue[i].value.value == '9') {ToSend[i].E = "Attente" }
    if ((ToSend[i].NGF == 'ECHAN' || ToSend[i].NGF == 'CHAUD') && dataValue[i].value.value == '10') {ToSend[i].E = "Arrêt forcé" }
    if ((ToSend[i].NGF == 'ECHAN' || ToSend[i].NGF == 'CHAUD') && dataValue[i].value.value == '11') {ToSend[i].E = "Arrêt défaut" }
    if ((ToSend[i].NGF == 'ECHAN' || ToSend[i].NGF == 'CHAUD') && dataValue[i].value.value == '12') {ToSend[i].E = "Manuel" }
    if ((ToSend[i].NGF == 'ECHAN' || ToSend[i].NGF == 'CHAUD') && dataValue[i].value.value == '13') {ToSend[i].E = "Dégommage" }
console.log(dataValue[i].value)
    }
    else
    ToSend[i].V = parseInt(dataValue[i].value.value.toFixed(0));
   }
  ToSend[i].LV = ToSend[i].V ;
    }}

  ToSend.push({ OPC_Socket_ID : data.OPC_Socket_ID, Socket_ID: data.Socket_ID , Selected_CT : data.Selected_CT, DGF : data.DGF , NGF : data.NGF });
  socket.emit('Cons_Answer', ToSend);
  logger.info('Cons_Answer to ' + data.Socket_ID)
    }
    });

  };
 })

}
}

if ( data.Mode =="Write" && Write_Perm) {
  // console.log(data)

if (data.T == "TC") {  var nodeToWrite = [
       {    nodeId: opcua.resolveNodeId(data.Adr ),
           attributeId: opcua.AttributeIds.Value,
           indexRange: null,
           value: { /* dataValue*/
              //  sourceTimestamp: new Date(2015, 5, 3),
              //  sourcePicoseconds: 30,
             value: { /* Variant */
              dataType: opcua.DataType.Boolean,
              value: data.LV
               }     }       }   ];  }

if (data.T == "TR" || data.T =="TM")  {  var nodeToWrite = [
       {   nodeId: opcua.resolveNodeId(data.Adr ),
           attributeId: opcua.AttributeIds.Value,
           indexRange: null,
           value: { /* dataValue*/
              //  sourceTimestamp: new Date(2015, 5, 3),
              //  sourcePicoseconds: 30,
            value: { /* Variant */
            dataType: opcua.DataType.Double,
            value: data.LV
               }     }       }   ];  }

the_session.write(nodeToWrite, function (err, statusCodes) {
      if (!err) {
          console.log( statusCodes.length + '--' + nodeToWrite.length);
          console.log( statusCodes[0] + '--' + opcua.StatusCodes.BadNotWritable);
          console.log(statusCodes + '--' + opcua.StatusCodes.Good);

         the_session.readVariableValue(data.Adr , function(err,dataValue,diagnostics) {
         if (err) { logger.error("OPC error"+ err); OPC_Report(err, 'OPC_E')}
        else {

      if (dataValue && dataValue.value) {
      data.V = dataValue.value.value;
      //Renvoi de la consigne unitaire vers le client
      socket.emit('Notif_Client', { Msg : data.L + ' changé à ' + data.V  , Socket_ID : data.Socket_ID})
      socket.emit('Cons_Update', data);
      console.log(data)
      }

      }
    });
  }
      else { logger.error(err) ; OPC_Report(err, 'OPC_E') } // Reporting

});
}
if ( data.Mode =="Write" && !Write_Perm) { console.log(data);logger.info("Write Forbidden : " + data.M) ;  OPC_Report("WritePerm ", 'Server_M',  data.M) } // Reporting
}
  if (!the_session) { socket.emit('Notif_All', { Msg : 'OPC Session Error'}); logger.error("OPC session error") ; }
  // if (sql != 'Read') socket.emit('Error', { Component: 'SQL', Property : 'Session', Value : 'Off'})
});



// var config_ARCHIVES = {
//     user: 'BdConnectClient',
//     password: 'Uuxwp7Mcxo7Khy',
//     // user : 'root',
//     // password:'P@ssw0rd',
//     // server: 'localhost\\SQLEXPRESS', // You can use 'localhost\\instance' to connect to named instance
//     server: OPC_SQL + '\\MSSQLSERVER',
//     database: 'ARCHIVES',
//
//     options: {
//         encrypt: true // Use this if you're on Windows Azure
//     }
// }

async.series([

  function(callback)  {
  sql.connect(P.SQL_OPTIONS).then(function() {
  // report("SQL Mobilite connected ", '' , 'Server' , 'SQLM_C')
  SRV_STATUS.SQL.CODE = 'CONNECTED';
  logger.info('MS SQL connected success');
  callback();
  }).catch(function(err) {
  console.log(err.code + ":" + err.message, 'SQL Mobilite' , '' , 'SQLM_C')
  SRV_STATUS.SQL = { CODE : err.code , NAME : err.name , MESSAGE : err.message }
  callback();
  });

  //       var request =  new sql.Request()
  //       .query('select TOP '+ SELECT + ' * from dbo.SUPERVISION  ').then(function(recordset) {
  //         ids = JSON.parse(JSON.stringify(recordset.recordset).replace(/"\s+|\s+"/g,'"'))
  //         console.log(Object.keys(ids).length);
  //         callback();
  //         }).catch(function(err) {
  //           console.log(err.name + ' --> ' + err.code + ' : ' + err.message);
  //       });
  //
  //       }).catch(function(err) {
  //
  //           SRV_STATUS.SQL = { CODE : err.code , NAME : err.name , MESSAGE : err.message }
  //           console.log(err.name + ' --> ' + err.code + ' : ' + err.message);
  //            callback();
  //       });
  //
  },
    // step 1 : connect to
    function(callback)  {
        client.connect(P.OPC_URL,function (err) {
            if(err) {
              console.dir(err)
                logger.info(" cannot connect to endpoint :" , P.OPC_URL );
            } else {
                logger.info("OPC connected !");
                SRV_STATUS.OPC.CODE = 'CONNECTED' ;
                // console.dir(client)

            }
          callback(err);
        });

                   client.on("timed_out_request ", function () {
                      logger.info("timed_out_request ");
                   });
                   client.on("start_reconnection", function () {
                       logger.info("start_reconnection not working so aborting");
                       the_session.close(function (err) {
                         if(!err) {
                             logger.info("OPC session Closed" , P.OPC_URL );
                         }
                       })
                       client.disconnect(function (err) {
                         if(!err) {
                             logger.info("OPC Disconnected" , P.OPC_URL );
                         }
                       })

                   });

                   client.on("connection_reestablished", function () {
                       logger.info("connection_reestablished ");
                       client.connect(P.OPC_URL,function (err) {
                           if(err) {
                               logger.info(" cannot connect to endpoint :" , P.OPC_URL );
                           } else {
                               logger.info("OPC connected !");

                           }
                       });
                       client.createSession( function(err,session) {
                           if(!err)
                             { the_session = session;
                               logger.info("Session Ok !");
                               callback(err);
                             }
                       });

                   });
                   client.on("close", function () {
                       logger.info("close and abort");
                                          });
                   client.on("backoff", function (nb, delay) {
                       logger.info("  connection failed for the", nb,
                               " time ... We will retry in ", delay, " ms");
                   });

    },

    // step 2 : createSession
    function(callback) {

        client.createSession( function(err,session) {
            if(!err)
              { the_session = session;
                logger.info("Session Ok !");
    //             console.log( " name..................... ",session.name);
    // console.log( " sessionId................ ",session.sessionId);
    // console.log( " authenticationToken...... ",session.authenticationToken);
    // console.log( " timeout.................. ",session.timeout);
    // console.log( " serverNonce.............. ",session.serverNonce.toString("hex"));
    // console.log( " serverCertificate........ ",session.serverCertificate.toString("base64"));
    // console.log( " serverSignature.......... ",session.serverSignature);
    // console.log( " lastRequestSentTime...... ",new Date(session.lastRequestSentTime).toISOString(), now - session.lastRequestSentTime);
    // console.log( " lastResponseReceivedTime. ",new Date(session.lastResponseReceivedTime).toISOString(), now - session.lastResponseReceivedTime);
                callback(err);
              }
        });
    },
    function(callback) {

    //subscription to general OPC parameters ( Alarms Nbr , ....)
      var  init_OPC_sub=new opcua.ClientSubscription(the_session,{
        requestedPublishingInterval: 1000,
        requestedLifetimeCount: 200 ,
         requestedMaxKeepAliveCount: 20,
           maxNotificationsPerPublish: 10,
           publishingEnabled: true,
           priority: 10
       });
      var id ;
       for (var i = 0, len = sub_param.length; i < len; i++) {
       id = sub_param[i];
              var nodeId = "ns=2;s=" + id.adr;
              var monitoredItem  = init_OPC_sub.monitor({
                 nodeId: opcua.resolveNodeId(nodeId),
                 attributeId: opcua.AttributeIds.Value
               },   {samplingInterval: 1000,discardOldest: false,queueSize: 1 },
                 opcua.read_service.TimestampsToReturn.Both
                 );

              monitoredItem.on("changed",function(dataValue){
                // console.log("change")
              //io.sockets.emit('Event',dataValue.value.value);
              if (dataValue.value != null )
              {id.value = dataValue.value.value;
              socket.emit('OPC_General_Update',id);

             }
              //  console.log(nodeId.toString() , "\t value : ",dataValue.value.value.toString());
              });
    };

  logger.info('Subscription Finished');
  callback(err);
  },
    function(callback) {
// souscription à toutes les variables OPC

       var the_subscription=new opcua.ClientSubscription(the_session,{
         requestedPublishingInterval: 1000,
         requestedLifetimeCount: 200 ,
          requestedMaxKeepAliveCount: 20,
            maxNotificationsPerPublish: 10,
            publishingEnabled: true,
            priority: 10
       });

       // install monitored item
       for (var i = 0, len = ids.length; i < len; i++) {
       id = ids[i];
  if  (i< BATCH_MONITORING) {
    var adr;
              Mnemo = id.Metier + '_' + id.Installation_technique;
              Mnemo +=  '_' + id.NomGroupeFonctionnel + id.DesignGroupeFonctionnel;
              Mnemo +=  '_' + id.NomObjetFonctionnel + id.DesignObjetFonctionne ;
              Mnemo +=  '_' + id.Information ;
              adr = '/Application/STEGC/Paris/PT/' + id.Installation_technique ;
              adr += '/Acquisition/' + Mnemo + '.Valeur';
              // id.Mnemo = Mnemo;
              var nodeId = "ns=2;s=" + adr;
              var monitoredItem  = the_subscription.monitor({
                 nodeId: opcua.resolveNodeId(nodeId),
                 attributeId: opcua.AttributeIds.Value
               },   {samplingInterval: 1000, discardOldest: false,queueSize: 10 },
                 opcua.read_service.TimestampsToReturn.Both
                 );

              monitoredItem.on("changed",function(dataValue){
              //io.sockets.emit('Event',dataValue.value.value);
              if (dataValue.value != null )
              id.Value = dataValue.value.value  ;
              socket.emit('OPC_Update',id);
              //  console.log(nodeId.toString() , "\t value : ",dataValue.value.value.toString());
              });
          i++;
          } else {
          sleep(WAIT);
          logger.info('wait');
          i=0;
          }
    };
    logger.info('Global Subscription Finished');

  },

    // close session
    function(callback) {
        the_session.close(function(err){
            if(err) {
                logger.info("session closed failed ?");
            }

        });
    }

],
function(err) {
    if (err) {
        logger.info(" failure ",err);
    } else {
        logger.info("done!");
    }
    client.disconnect(function(){});
}) ;
